{
  "name": "lp_solve",
  "description": "A Node.js binding for lp_solve",
  "version": "0.1.10",
  "author": {
    "name": "Stephen Remde",
    "email": "smremde@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/smremde/node-lp_solve.git"
  },
  "keywords": [
    "lp_solve",
    "linear programming",
    "lpsolve"
  ],
  "dependencies": {
    "bindings": "~1.1.1",
    "nan": "~0.6.0",
    "tap": "~0.4.6"
  },
  "scripts": {
    "test": "tap test/*-test.js",
    "install": "node-gyp rebuild"
  },
  "license": "LGPL",
  "gypfile": true,
  "main": "index",
  "readme": "node-lp_solve\r\n============\r\n\r\nA NodeJS module for createing and solving simple Linear Programs using lp_solve.\r\n\r\nExample:\r\n\r\n```javascript\r\n\r\n// solve http://people.brunel.ac.uk/~mastjjb/jeb/or/morelp.html\r\n\r\nvar lpsolve = require('lp_solve');\r\nvar Row = lpsolve.Row;\r\n\r\nvar lp = new lpsolve.LinearProgram();\r\n\r\nvar x = lp.addColumn('x'); // lp.addColumn('x', true) for integer variable\r\nvar y = lp.addColumn('y'); // lp.addColumn('y', false, true) for binary variable\r\n\r\n\r\nvar objective = new Row().Add(x, 1).Add(y, 1);\r\n\r\nlp.setObjective(objective);\r\n\r\nvar machineatime = new Row().Add(x, 50).Add(y, 24);\r\nlp.addConstraint(machineatime, 'LE', 2400, 'machine a time')\r\n\r\nvar machinebtime = new Row().Add(x, 30).Add(y, 33);\r\nlp.addConstraint(machinebtime, 'LE', 2100, 'machine b time')\r\n\r\nlp.addConstraint(new Row().Add(x, 1), 'GE', 75 - 30, 'meet demand of x')\r\nlp.addConstraint(new Row().Add(y, 1), 'GE', 95 - 90, 'meet demand of y')\r\n\r\nconsole.log(lp.dumpProgram());\r\nconsole.log(lp.solve());\r\nconsole.log('objective =', lp.getObjectiveValue())\r\nconsole.log('x =', lp.get(x));\r\nconsole.log('y =', lp.get(y));\r\nconsole.log('machineatime =', lp.calculate(machineatime));\r\nconsole.log('machinebtime =', lp.calculate(machinebtime));\r\n\r\n```\r\n\r\nOutput\r\n\r\n```\r\nminimize: +1 x +1 y\r\nsubject to\r\nmachine a time:  +50 x +24 y <= 2400\r\nmachine b time:  +30 x +33 y <= 2100\r\nmeet demand of x:  +1 x >= 45\r\nmeet demand of y:  +1 y >= 5\r\n\r\nModel name:  '' - run #1\r\nObjective:   Minimize(R0)\r\n\r\nSUBMITTED\r\nModel size:        4 constraints,       2 variables,            6 non-zeros.\r\nSets:                                   0 GUB,                  0 SOS.\r\n\r\nUsing DUAL simplex for phase 1 and PRIMAL simplex for phase 2.\r\nThe primal and dual simplex pricing strategy set to 'Devex'.\r\n\r\n\r\nOptimal solution                  50 after          2 iter.\r\n\r\nExcellent numeric accuracy ||*|| = 0\r\n\r\n MEMO: lp_solve version 5.5.2.0 for 64 bit OS, with 64 bit REAL variables.\r\n      In the total iteration count 2, 0 (0.0%) were bound flips.\r\n      There were 0 refactorizations, 0 triggered by time and 0 by density.\r\n       ... on average 2.0 major pivots per refactorization.\r\n      The largest [LUSOL v2.2.1.0] fact(B) had 5 NZ entries, 1.0x largest basis.\r\n      The constraint matrix inf-norm is 50, with a dynamic range of 50.\r\n      Time to load data was 0.001 seconds, presolve used 0.004 seconds,\r\n       ... 0.003 seconds in simplex solver, in total 0.008 seconds.\r\n\r\n{ code: 0, description: 'OPTIMAL' }\r\nobjective = 50\r\nx = 45\r\ny = 5\r\nmachineatime = 2370\r\nmachinebtime = 1515\r\n```\r\n",
  "readmeFilename": "README.md",
  "_id": "lp_solve@0.1.10",
  "dist": {
    "shasum": "0f8f72b0d62244eaaae67af1d41b155b035e4d79"
  },
  "_from": "lp_solve"
}
